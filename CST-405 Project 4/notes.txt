Lexer --> tokens
    tokens --> Parser --> check syntax --> AST
               (interacts with and updates symbol tables)
AST --> Semantic Analyzer --> Intermediate Representation Code (3-address, aka TAC)
IRCode (i.e TAC) --> Optimizer --> Optimzed TAC
Optimized TAC --> Code Generator --> Assembly (e.g. MIPS, ARM, WebAssembly)


int x;
int y;
int z;
int w;
w = 1029473547835 + 2424 + 3535
x = 1;
y = 2;
z = x + 1 + y + 100;
write x;

Lexer:


Parser:
 - syntax is correct

                                Prog
                        /               \
                    write                =
                                    /         \
                                Var            +
                              /    \        /       
                             z     int     =   /    \
                                         /   \ 1      +
                                        Var   1       /   \
                                       /  \          =    100
                                      x    int     /   \
                                                  Var   2
                                                /    \
                                               y     int

-------------------------------------------------------------------------------

                                Prog
                        /               \
                    write                =
                                    /        \
                        z ($$.type = int)     +
                                          /      
                                          =     /   \
                                         /   \ 1      +
                                        Var   1       /   \
                                       /  \          =    100
                                      x    int     /   \
                                                  Var   2
                                                /    \
                                               y     int

Semantic Analyzer:


                                Prog
                        /               \
                    write                =
                                    /        \
                        z ($$.type = int)     +
                                          /      
                                          =     /   \
                                         /   \ 1      +
                                        x     1       /   \
                                                     =    100
                                                  /   \
                                                      2

x = 1
Q1: has a been declared?
Q2: are x and 1 of compatible types?

if x is int and 1 is int then OK
if x is int and 1.0 is float then coerce 1.0 --> 1, then OK
if x is int and 1.0 is float then ask the user to maybe typecast (int) 1.0, then OK
                                                
Three address code and temporary variables:
------------------------------------------

SOURCE:  c = a + b    

TAC:     T0 = a + b
         T1 = T0

SOURCE:  c = a + b + d + 100 

TAC:     T0 = d + 100
         T1 = b + T0
         T2 = a + T1

SOURCE:  c = a + b + d + 100 + x + y + a + 12 + a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +a + b + d + 100 + x + y + a + 12 +

        Maybe using T0 ... T25 ?
        Temporary Variable Allocation and Deallocation


Optimizer:

SOURCE:
a = 1
b = a + 2 + a
c = a + b + a

TAC (doubly-linked list):
T0 = 1
T1 = 2 + T0
T2 = T0 + T1
T3 = T2 + T0
T4 = T0 + T3


Optimization rule 1: Constant propagation
T0 = 1
T1 = 2 + T0

become: 
T1 = 2 + 1

Optimization Rule 2: Constant Folding
T1 = 2 + 1

Becomes:
T1 = 3

Optimization rule 3: Eliminate dead (unreachable) code

Final outcome is an optimized (simpler, shorter) doubly linked list


Code Generator:

SOURCE:
T0 = 1
T1 = 2 + T0

MIPS:

$t0 LOAD,1
$t1 ADD, 2, $t0

-------- COMPLEX VARIABLES & FUNCTIONS ---------------------
int
float
boolean
array
structs

ITEMS TO ADDRESS:
- type match

  int x;
  float y;
  float z;
  int m;
  int k;
  x = 5;
  y = 2.3;
  z = x + y;       z = (float)x + y;
  m = x + y + 4 + 2 + 3.1 + y + y + y;
  m = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 1.0000000001;
  x = 999;
  k = 1000;
  m = x/k;
  m = 1/0;
  m = (x-x)/(k-k + m -345 +......)

  REQUIRED IMPLEMENTATION:
    - type casting (programmer decides)
    - type coercion (compiler decides)

    for typecasting add/modify CFG rule, for example:

    Expr: ID BinOp ID  {  ...  }
          | LPAREN TYPE RPAREN ID BinOp LPAREN TYPE RPAREN ID {  ... }

    for type coercion, no need to modify rules just C FUNCTIONS
    that execute when an expression has mixed types

ADD OPERATIONS --> OPERATOR PRECEDENCE
^*/+-  (Later... instead of x^y, POW(x,y))
Ask yourself about POW(POW(x,y),x)
3 lines of code in Bison

ARRAYS:
int x[10];  2D arrays are optional
strings?

z = x[12] + x[t];